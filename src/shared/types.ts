export enum MessageType {
    initialize = "initialize",
    restore = "restore",
    msgFromExtension = "msgFromExtension",
    msgFromWebview = "msgFromWebview",
    info = "info",
    error = "error",
}

/**
 * The contract between the frontend/webview and the backend/extension on how to communicate.
 */
export interface VscMessage<T> {
    type: string;
    data?: T;
    logger?: string;
}

/**
 * The data format for messages from the backend to the frontend.
 * @property prompts - The pre-defined prompts to display in the sidebar menu.
 * @property bpmnFiles - All of the bpmn files in the workspaces that are currently open.
 * @property response - The response from the GPT.
 * If the response is a string, it is the text generated by the GPT.
 * If the response is a boolean, it is just a message to the frontend that the response has been processed.
 */
export interface MessageToWebview {
    prompts?: string;
    bpmnFiles?: string[];
    response?: string | boolean;
}

export type Prompt =
    DefaultPrompt |
    DocumentationPrompt;

/**
 * The default prompt type.
 * @property text - The text to use for the prompt.
 * @property process - A indicator if the prompt needs additional information about a specific bpmn diagram.
 * If the value is a boolean,
 * it was read from the prompt.json file
 * and results into a dropdown menu where the user can select the specific bpmn file.
 * If the value is a string, it is the path to the bpmn diagram the user selected.
 * @property form - An indicator if the prompt needs additional information about a specific form.
 */
export interface DefaultPrompt {
    text: string;
    process?: boolean | string;
    form?: boolean;
}

/**
 * A specific prompt for creating process documentation.
 * @property process - The path to the bpmn file to which the documentation applies.
 * @property template - The path to the template file to use for the documentation.
 * It is empty if the default template should be used
 * @property format - The format of the documentation.
 */
export interface DocumentationPrompt {
    process: string;
    template: string;
    format: OutputFormat;
}

/**
 * A list of documentation formats.
 */
export enum OutputFormat {
    json = "JSON",
    md = "Markdown",
}
